name: ci
on:
  pull_request:
  push:
jobs:
  rustfmt:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
      - run: cargo fmt --all -- --check

  test-target-is-host:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        host_os:
          - ubuntu-18.04
          - macos-latest
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: ${{ matrix.rust_channel }}
      - run: cargo test -vv ${{ matrix.mode }}

  # Verify that the default configuration and the "wasm32_c" configuration build.
  build-cross-wasm:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - # Default
          - --features=wasm32_c
        host_os:
          - ubuntu-18.04
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}
      # "wasm_c" has only been tested with clang-10 and llvm-ar-10. The build
      # will fail when using some older versions.
      - if: ${{ matrix.features == '--features=wasm32_c' }}
        run: sudo apt-get -yq --no-install-suggests --no-install-recommends install clang-10 llvm-10
      - env:
          # These are only needed for the "wasm_c" feature currently.
          CC_wasm32_unknown_unknown: clang-10
          AR_wasm32_unknown_unknown: llvm-ar-10
        # TODO: Collect the resultant artifacts and/or run the tests.
        run: |
          cargo test --no-run -vv ${{ matrix.features }} ${{ matrix.mode }} --target=${{ matrix.target }}

  build-cross-apple:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        host_os:
          - macos-latest
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - aarch64-apple-ios
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}
      # TODO: Collect the resultant artifacts and/or run the tests.
      - run: |
          cargo test --no-run -vv ${{ matrix.features }} ${{ matrix.mode }} --target=${{ matrix.target }}
