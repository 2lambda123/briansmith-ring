name: ci
on:
  pull_request:
  push:
jobs:
  rustfmt:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
      - uses: actions/checkout@v2
      - run: cargo fmt --all -- --check

  test-target-is-host:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - # Default
        host_os:
          - ubuntu-18.04
          - macos-latest
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: ${{ matrix.rust_channel }}

      - uses: actions/checkout@v2

      - run: |
          cargo test -vv ${{ matrix.features }} ${{ matrix.mode }}

  test-cross-linux-linux:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - # Default
        host_os:
          - ubuntu-18.04
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - x86_64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v2

      - run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}

      - run: |
          CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc \
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER="qemu-aarch64 -L /usr/aarch64-linux-gnu" \
          CC_arm_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \
          CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc \
          CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_RUNNER="qemu-arm -L /usr/arm-linux-gnueabihf" \
          CC_i686_unknown_linux_gnu=clang \
          CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=clang \
          CC_i686_unknown_linux_musl=clang \
          CARGO_TARGET_i686_UNKNOWN_LINUX_MUSL_LINKER=clang \
          CC_x86_64_unknown_linux_musl=clang \
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=clang \
          cargo test -vv --target=${{ matrix.target }} ${{ matrix.features }} ${{ matrix.mode }}

  # Verify cross-compiling with the default feature set works.
  build-cross-linux:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - # Default
        host_os:
          - ubuntu-18.04
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi
    steps:
      - uses: actions/checkout@v2

      - run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}

      # wasm32-*: When the "wasm32_c" feature isn't enabled, we don't need to set anything.
      # TODO: Collect the resultant artifacts and/or run the tests.
      - run: |
          PATH=${ANDROID_SDK_ROOT}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH \
          CC_aarch64_linux_android=aarch64-linux-android21-clang \
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android21-clang \
          CC_armv7_linux_androideabi=armv7a-linux-androideabi18-clang \
          CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=armv7a-linux-androideabi18-clang \
          cargo test -vv --no-run --target=${{ matrix.target }} ${{ matrix.features }} ${{ matrix.mode }}

  test-cross-wasm32-c:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - # Default
          - --features=wasm32_c
        host_os:
          - ubuntu-18.04
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - wasm32-unknown-unknown
        webdriver:
          - GECKODRIVER=geckodriver
          - CHROMEDRIVER=chromedriver
    steps:
      - uses: actions/checkout@v2

      - run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}

      - env:
          # These are only needed for for wasm32 targets only, only when the "wasm_c"
          # feature is enabled.
          CC_wasm32_unknown_unknown: clang-10
          AR_wasm32_unknown_unknown: llvm-ar-10
          CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER: wasm-bindgen-test-runner
        # TODO: Collect the resultant artifacts and/or run the tests.
        run: |
          ${{ matrix.webdriver }} cargo test -vv --target=${{ matrix.target }} ${{ matrix.features }} ${{ matrix.mode }}

  build-cross-apple:
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        host_os:
          - macos-latest
        mode:
          - # debug
          - --release
        rust_channel:
          - stable
          - beta
          - nightly
        target:
          - aarch64-apple-ios
    steps:
      - uses: actions/checkout@v2

      - run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust_channel }}

      # TODO: Collect the resultant artifacts and/or run the tests.
      - run: |
          cargo test --no-run -vv ${{ matrix.features }} ${{ matrix.mode }} --target=${{ matrix.target }}
