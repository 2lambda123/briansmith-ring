Build Prerequisites:

  * A C compiler is required:
    * Visual Studio 2013 or later on Windows.
    * GCC 4.8 or later, or Clang 3.4 or later on Linux.

  * Go[1] is currently required for running the tests.

  * Perl 5.6.1 or later is required for building the assembly language code.
    Perl is not required on Windows yet because the assembly language code
	isn't built on Windows yet.

  * On platforms other than Windows, GNU Make 3.81 or later is required.

Upstream BoringSSL uses CMake. ring uses msbuild on Windows and GNU Make
otherwise.

For Windows, open ring.sln in Visual Studio and choose Build|Build Solution.
Alternatively, from the VS2013 Native Tools Command Prompt:

  msbuild ring.sln

The built libring.lib will be put into a subdirectory of build/, depending on
which configuration and which platform you choose to build for.

On other platforms:

  make -j6 CC=clang-3.7 CXX=clang-3.7++ ARCH=x86

The default build is a debug build (CMAKE_BUILD_TYPE=DEBUG). You can build a
release build with:

  make -j6 CC=clang-3.7 CXX=clang-3.7++ ARCH=x86 \
       CMAKE_BUILD_TYPE=RELWITHDEBINFO

GCC 4.8, 4.9, and 5 all work, as do clang 3.4, 3.5, 3.6, and 3.7.

The x86 ("Win32" on Windows) and x86_64 architectures are supported. (ARM and
MIPS support will come later.)

There is no "./configure" step yet, though there probably should be one so that
you don't have to pass CC, CXX, and ARCH on the command line every time.

Upstream BoringSSL supports building shared libraries. ring currently does not
build *any* libraries on non-Windows platforms. Instead, it expects you to link
the object files named in $(RING_OBJS) directly into your project. Of course,
you can create a static library if you want. (TODO: just provide a target for a
static library, as it is easy to do.)

[1] https://golang.org/dl/
